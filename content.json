[{"title":"ELK","date":"2019-12-20T02:00:31.000Z","path":"2019/12/20/DevOps/ELK/","text":"ELK 是什么? 是 ElasticSearch、Logstash、Kibana 三个开源软件的组合 具备数据收集、存储、分析功能 适合实时数据分析和检索的场景 具有分布式特性 易扩展 ELK 功能 ElasticSearch 存储 索引 Logstash 收集 处理 Kibana 可视化 统计分析 Beat（扩展组件） MetricBeat 收集各种主机信息（CPU、内存……），详见官网 Filebeat 轻量级日志收集组件 简单架构 使用 使用 Docker 安装 ELK 参考 https://github.com/deviantony/docker-elk.git Kibana 中文设置 $ vim kibana/config/kibana.yml 新增中文配置 ↓↓↓ i18n.locale: “zh-CN” ElasticSearch 默认需要 4G 内存；可以通过设置 ES_JAVA_OPTS 来修改 如：ES_JAVA_OPTS=&quot;-Xms512m -Xmx512m&quot; 使用 Docker 安装 MetricBeat 获取配置文件 下载 $ wget https://artifacts.elastic.co/downloads/beats/metricbeat/metricbeat-7.4.1-linux-x86_64.tar.gz 解压 $ tar zxvf metricbeat-7.4.1-linux-x86_64.tar.gz 提取 metricbeat.yml modules.d 使用 Docker Compose $ vim docker-compose.yml version: '2' services: metricbeat: image: docker.elastic.co/beats/metricbeat:7.4.1 container_name: metricbeat volumes: - /var/run/docker.sock:/var/run/docker.sock:ro - /proc:/hostfs/proc:ro - /sys/fs/cgroup:/hostfs/sys/fs/cgroup:ro - /:/hostfs:ro - ./metricbeat/metricbeat.yml:/usr/share/metricbeat/metricbeat.yml:ro - ./metricbeat/modules.d:/usr/share/metricbeat/modules.d:ro - /usr/share/zoneinfo/Asia/Shanghai:/etc/localtime:ro user: &quot;root&quot; command: -system.hostfs=/hostfs -e restart: always docker exec -it metricbeat metricbeat modules enable systemop0=>operation: Data（Log） op1=>operation: MetricBeat op2=>operation: Redis op3=>operation: Logstash op4=>operation: ElasticSearch op5=>operation: Kibana op0(right)->op2 op1(right)->op4 op2(right)->op3 op3(right)->op4 op4(right)->op5{\"scale\":1,\"line-width\":2,\"line-length\":50,\"text-margin\":10,\"font-size\":12} var code = document.getElementById(\"flowchart-0-code\").value; var options = JSON.parse(decodeURIComponent(document.getElementById(\"flowchart-0-options\").value)); var diagram = flowchart.parse(code); diagram.drawSVG(\"flowchart-0\", options);","tags":[{"name":"ELK","slug":"ELK","permalink":"http://www.lockey.xyz/tags/ELK/"},{"name":"ElasticSearch","slug":"ElasticSearch","permalink":"http://www.lockey.xyz/tags/ElasticSearch/"},{"name":"Logstash","slug":"Logstash","permalink":"http://www.lockey.xyz/tags/Logstash/"},{"name":"Kibana","slug":"Kibana","permalink":"http://www.lockey.xyz/tags/Kibana/"},{"name":"MetricBeat","slug":"MetricBeat","permalink":"http://www.lockey.xyz/tags/MetricBeat/"},{"name":"日志","slug":"日志","permalink":"http://www.lockey.xyz/tags/%E6%97%A5%E5%BF%97/"}]},{"title":"Zabbix","date":"2019-12-13T07:07:21.000Z","path":"2019/12/13/DevOps/Zabbix/","text":"什么是 Zabbix ？ Zabbix 是一种系统监控。网络监控、服务监控工具。 监控对象 主机 软件 模块功能 Monitoring 信息聚合 状态展示 信息查询 监控统计 Inventory 资产信息 管理 查询 Report 报表 审计 日志 Configuration 主机信息配置 监控规则配置 报警规则配置 统计图表配置 自动发现配置 Administrator 用户权限管理 报警方式配置 脚本配置 代理配置 Personal 接收报警配置 接收报警规则 个人信息管理 Zabbix 特点 安装简单 监控方便 免费开源 自动化 C/S 结构、分布式架构 与同类型比较 系统名称 默认监控 自定义监控 批量监控 修改监控 图表 报警 其他 Zabbix 自带监控多 可自定义编写插件 server 端可配置自动注册规则；client 端无需操作 手动在模板中新增监控 自带图表插件 支持多种报警，依赖插件 自带 Web 监控 Nagios 自带监控少 可自定义编写插件 用脚本在 server 端新增 host， 并拷贝 service 文件 用脚本修改所有主机的 service 文件，加入新增服务 可以按照图表插件 支持多种报警，依赖插件 Zabbix 使用更友好，探索功能需要较多时间，学习成本较大 Nagios 容易上手，脚本很强大，但写起来也费时费力 架构图 部署方式 网络协议模式：server-client 代理模式：server-proxy-client 节点模式：master-node-client 使用 安装 打开官网下载页面 选择操作系统 按引导安装 安装 Server 端 添加源 安装 Server 安装 MySQL 初始化 MySQL 启动 zabbix-server 安装 Web 端 安装 Web 配置 timezone： $ vim /etc/php-fpm.d/zabbix.conf ; php_value[date.timezone] = Asian/Shanghai 启动 [httpd|nginx|apache2] php-fpm 打开 http://[ip]/zabbix 默认用户密码：Admin : zabbix 安装 Agent 端 添加源 安装 Agent 配置连接的 Server $ vim /etc/zabbix/zabbix_agentd.conf 启动 zabbix-agent 踩坑指南 Mariadb 代替 MySQL 关闭 SeLinux，否则可能出现：cannot set resource limit 默认使用 httpd 作为 Web 服务 Web 使用 配置自动发现 配置报警 配置发送报警 配置接收报警 配置统计图表 配置聚合图表 用户管理 配置聚合图表 通用设置套路 Web API 功能 远程管理 Zabbix 配置 远程检索配置和历史数据 接入方式 http://[ip]:[port]/zabbix/api_jsonrpc.php 使用 JSON-RPC 实现 数据传输以 JSON 格式 Headers Content-Type: application/json-rpc Content-Type: application/json Content-Type: application/jsonrequest 接入步骤 登录获取 token 请求头带入 Authorization: [token] 参考资料 中小型企业通用自动化运维架构 zabbix与nagios对比op1=>operation: Configuration op2=>operation: Discovery op3=>operation: Create Discovery Rules op4=>operation: Create Rules op1(right)->op2 op2(right)->op3 op3(right)->op4{\"scale\":1,\"line-width\":2,\"line-length\":50,\"text-margin\":10,\"font-size\":12} var code = document.getElementById(\"flowchart-0-code\").value; var options = JSON.parse(decodeURIComponent(document.getElementById(\"flowchart-0-options\").value)); var diagram = flowchart.parse(code); diagram.drawSVG(\"flowchart-0\", options);op1=>operation: Configuration op2=>operation: Create Action op3=>operation: Create Condition op4=>operation: Create Operation op1(right)->op2 op2(right)->op3 op3(right)->op4{\"scale\":1,\"line-width\":2,\"line-length\":50,\"text-margin\":10,\"font-size\":12} var code = document.getElementById(\"flowchart-1-code\").value; var options = JSON.parse(decodeURIComponent(document.getElementById(\"flowchart-1-options\").value)); var diagram = flowchart.parse(code); diagram.drawSVG(\"flowchart-1\", options);op1=>operation: Administrator op2=>operation: Media Type op3=>operation: Email op4=>operation: Update op1(right)->op2 op2(right)->op3 op3(right)->op4{\"scale\":1,\"line-width\":2,\"line-length\":50,\"text-margin\":10,\"font-size\":12} var code = document.getElementById(\"flowchart-2-code\").value; var options = JSON.parse(decodeURIComponent(document.getElementById(\"flowchart-2-options\").value)); var diagram = flowchart.parse(code); diagram.drawSVG(\"flowchart-2\", options);op1=>operation: Administrator op2=>operation: Users op3=>operation: Admin op4=>operation: Media op5=>operation: Add op1(right)->op2 op2(right)->op3 op3(right)->op4 op4(right)->op5{\"scale\":1,\"line-width\":2,\"line-length\":50,\"text-margin\":10,\"font-size\":12} var code = document.getElementById(\"flowchart-3-code\").value; var options = JSON.parse(decodeURIComponent(document.getElementById(\"flowchart-3-options\").value)); var diagram = flowchart.parse(code); diagram.drawSVG(\"flowchart-3\", options);op1=>operation: Configuration op2=>operation: Hosts op3=>operation: Graphs op4=>operation: 条目选择 op1(right)->op2 op2(right)->op3 op3(right)->op4{\"scale\":1,\"line-width\":2,\"line-length\":50,\"text-margin\":10,\"font-size\":12} var code = document.getElementById(\"flowchart-4-code\").value; var options = JSON.parse(decodeURIComponent(document.getElementById(\"flowchart-4-options\").value)); var diagram = flowchart.parse(code); diagram.drawSVG(\"flowchart-4\", options);op1=>operation: Monitoring op2=>operation: Screens op3=>operation: Add op4=>operation: Edit Screen op1(right)->op2 op2(right)->op3 op3(right)->op4{\"scale\":1,\"line-width\":2,\"line-length\":50,\"text-margin\":10,\"font-size\":12} var code = document.getElementById(\"flowchart-5-code\").value; var options = JSON.parse(decodeURIComponent(document.getElementById(\"flowchart-5-options\").value)); var diagram = flowchart.parse(code); diagram.drawSVG(\"flowchart-5\", options);op1=>operation: Administrator op2=>operation: Users op3=>operation: User Groups op1(right)->op2 op2(right)->op3{\"scale\":1,\"line-width\":2,\"line-length\":50,\"text-margin\":10,\"font-size\":12} var code = document.getElementById(\"flowchart-6-code\").value; var options = JSON.parse(decodeURIComponent(document.getElementById(\"flowchart-6-options\").value)); var diagram = flowchart.parse(code); diagram.drawSVG(\"flowchart-6\", options);op1=>operation: Monitoring op2=>operation: Screens op3=>operation: Add op4=>operation: Edit Screen op1(right)->op2 op2(right)->op3 op3(right)->op4{\"scale\":1,\"line-width\":2,\"line-length\":50,\"text-margin\":10,\"font-size\":12} var code = document.getElementById(\"flowchart-7-code\").value; var options = JSON.parse(decodeURIComponent(document.getElementById(\"flowchart-7-options\").value)); var diagram = flowchart.parse(code); diagram.drawSVG(\"flowchart-7\", options);op1=>operation: 创建监控脚本 op2=>operation: 创建 Zabbix Item op3=>operation: 创建 Zabbix Trigger op4=>operation: 创建 Zabbix Action op1(right)->op2 op2(right)->op3 op3(right)->op4{\"scale\":1,\"line-width\":2,\"line-length\":50,\"text-margin\":10,\"font-size\":12} var code = document.getElementById(\"flowchart-8-code\").value; var options = JSON.parse(decodeURIComponent(document.getElementById(\"flowchart-8-options\").value)); var diagram = flowchart.parse(code); diagram.drawSVG(\"flowchart-8\", options);","tags":[{"name":"运维","slug":"运维","permalink":"http://www.lockey.xyz/tags/%E8%BF%90%E7%BB%B4/"},{"name":"Zabbix","slug":"Zabbix","permalink":"http://www.lockey.xyz/tags/Zabbix/"},{"name":"监控","slug":"监控","permalink":"http://www.lockey.xyz/tags/%E7%9B%91%E6%8E%A7/"}]},{"title":"云计算","date":"2019-12-10T07:43:55.000Z","path":"2019/12/10/DevOps/云计算/","text":"概念 云计算（cloud computing）是分布式计算的一种，指的是通过网络“云”将巨大的数据计算处理程序分解成无数个小程序，然后，通过多部服务器组成的系统进行处理和分析这些小程序得到结果并返回给用户。云计算早期，简单地说，就是简单的分布式计算，解决任务分发，并进行计算结果的合并。因而，云计算又称为网格计算。通过这项技术，可以在很短的时间内（几秒种）完成对数以万计的数据的处理，从而达到强大的网络服务。 现阶段所说的云服务已经不单单是一种分布式计算，而是分布式计算、效用计算、负载均衡、并行计算、网络存储、热备份冗杂和虚拟化等计算机技术混合演进并跃升的结果。 特点 虚拟化(计算、存储、网络等) 产品服务化(IaaS、PaaS、SaaS……) 弹性伸缩 架构 基础设施层(IaaS) 平台层(PaaS) 软件服务层(SaaS) 分类 私有云 公有云 混合云 荤段子论 男人找个女友或老婆是自建私有云，单身约炮或者到娱乐场所消费是公有云服务，按需使用并可弹性扩容，已婚男人找二奶小蜜则属于混合云。","tags":[{"name":"云计算","slug":"云计算","permalink":"http://www.lockey.xyz/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"}]},{"title":"DevOps","date":"2019-12-09T10:06:13.000Z","path":"2019/12/09/DevOps/DevOps/","text":"前置知识 云计算 概念 DevOps = Development(开发人员) + Operations(运维人员) DevOps 是一种重视“开发人员”和“运维人员”之间沟通合作的文化、运动或者惯例。通过自动化“软件交付”和“架构变更”的流程，使构建、测试、发布软件能更快、更频繁和更可靠。 各部门关系图 对应用程序发布的影响 减少变更范围 消除等待、快速反馈 使问题定位、调试变得简单 加强发布谐调，提升交付质量 自动化，稳定、快速、交付结果可预测 资源利用最大化 关键点 Automated infrastructure（自动化，系统之间的集成） shared version control（SVN共享源码） one step build and deploy（持续构建和部署） feature flags（主干开发） Shared metrics IRC and IM robots（信息整合） CI/CD 一线贯穿以上技术要点 主干开发是 CI 的前提 自动化以及代码周边集中管理是实施 CI 的必要条件 CI/CD 是 DevOps 的技术核心，在没有自动化测试、CI/CD 之下，DevOps 就是空中楼阁 工作流 工具箱 代码管理（SCM） GitHub、GitLab、BitBucket、SubVersion 构建工具 Ant、Gradle、maven 自动部署 Capistrano、CodeDeploy、Ansible、Jenkins 持续集成（CI） Bamboo、Hudson、Jenkins 配置管理 Ansible、Chef、Puppet、SaltStack、ScriptRock GuardRail、Consul、Apollo 容器 Docker、LXC、第三方厂商如AWS 编排 Kubernetes、Core、Apache Mesos、DC/OS 服务注册与发现 Zookeeper、etcd、Consul 脚本语言 python、ruby、shell 日志管理 ELK、Logentries 系统监控 Datadog、Graphite、Icinga、Nagios 性能监控 AppDynamics、New Relic、Splunk 压力测试 JMeter、Blaze Meter、loader.io 预警 PagerDuty、pingdom、厂商自带如AWS SNS HTTP加速器 Varnish 消息总线 ActiveMQ、SQS 应用服务器 Tomcat、JBoss Web服务器 Apache、Nginx、IIS 数据库 MySQL、Oracle、PostgreSQL等关系型数据库；cassandra、mongoDB、redis等NoSQL数据库 项目管理（PM） Jira、Asana、Taiga、Trello、Basecamp、Pivotal Tracker 参考链接 给 DevOps 初学者的入门指南","tags":[{"name":"Ansible","slug":"Ansible","permalink":"http://www.lockey.xyz/tags/Ansible/"},{"name":"自动化","slug":"自动化","permalink":"http://www.lockey.xyz/tags/%E8%87%AA%E5%8A%A8%E5%8C%96/"},{"name":"运维","slug":"运维","permalink":"http://www.lockey.xyz/tags/%E8%BF%90%E7%BB%B4/"}]},{"title":"Ansible","date":"2019-12-09T09:45:35.000Z","path":"2019/12/09/DevOps/Ansible/","text":"什么是 Ansible ？ 是一种 IT 自动化工具 依赖现有的操作系统的凭证来访问控制远程机器 简单易用、安全可靠 Ansible 可以完成哪些任务？ 系统配置 开发软件 编排高级的 IT 任务（持续集成等） Ansible 的优点 轻量级 易学习 操作灵活 无客户端 推送式 Module 丰富 商业化支持（Tower） Ansible 的缺点 效率低（串行执行） 易挂起 与其他类似项目对比 项目 客户端 通信方式 Web 页面 效率 易用 实现语言 API 开源社区 Ansible 无 ssh 有（Tower） 低 高 Python 有 40.8 K Puppet 有 socket 有 一般 低 Ruby 有 5.6 K Chef 有 ssh 有 一般 高 Python 有 6.1 K Salt 有 RabbitMQ 有 高 高 Python 有 10.5 K 使用 安装 Mac: pip install ansible 配置 Host 配置: /etc/ansible/hosts 配置项: Inventory | Inventory 中文 ssh 配置: ssh-copy-id -i .ssh/[公钥文件] [用户]@[远程主机] Ad-Hoc &amp; Playbook 类似 shell &amp; shell script，但 Playbook 更加强大 Playbook 是对 Ad-Hoc 的编排 Ad-Hoc 适合简单快速的任务 Playbook 适合复杂异步的任务 Playbook 解决 shell script 的编写复杂、操作繁琐、跨平台问题 Ad-Hoc 语法 ansible [远程主机 | 分组] -m [模块] -a '模块参数' Playbook 什么是 Playbook ? 由 YAML 编写 算是一门编程语言 命令集合 功能 声明配置 编排复杂任务 控制任务执行 语法 变量（Inventory &amp; Playbook） vars 流程控制 循环 with_items with_nested (嵌套) 判断 when [true, false, not] 基本结构 host: 被操作的机器 remote_user: 登录机器的用户 tasks: 需要执行的任务 如果语句以 “{” 开头，需要用引号包起来 例子 $ vim test.yml --- - hosts: 192.168.1.111 // 指定主机 remote_user: root // 指定在被管理的主机上执行任务的用户 tasks: // 任务列表 - name: disable selinux // 任务名 command: '/sbin/setenforce 0' // 调用command模块 执行关闭防火墙命令 - name: start nginx // 任务名 service: name=nginx state=started // 调用service模块 开启 nginx 服务 $ ansible-playbook test.yml","tags":[{"name":"Ansible","slug":"Ansible","permalink":"http://www.lockey.xyz/tags/Ansible/"},{"name":"自动化","slug":"自动化","permalink":"http://www.lockey.xyz/tags/%E8%87%AA%E5%8A%A8%E5%8C%96/"},{"name":"运维","slug":"运维","permalink":"http://www.lockey.xyz/tags/%E8%BF%90%E7%BB%B4/"}]},{"title":"弹性伸缩","date":"2019-12-09T06:37:59.000Z","path":"2019/12/09/Aliyun/弹性伸缩/","text":"能力 根据业务需求和策略自动调整弹性计算资源，在业务需求增长时无缝增加 ECS 实例满足计算需要，在业务需求下降时自动减少 ECS 实例节约成本。 使用 步骤 op1=>operation: 创建伸缩组 op2=>operation: 创建伸缩配置 op3=>operation: 启用伸缩组 op4=>operation: 创建伸缩规则 op5=>operation: 创建定时任务 op6=>operation: 创建报警任务 op1(right)->op2 op2(right)->op3 op3(right)->op4 op4(right)->op5 op5(right)->op6{\"scale\":1,\"line-width\":2,\"line-length\":50,\"text-margin\":10,\"font-size\":12} var code = document.getElementById(\"flowchart-0-code\").value; var options = JSON.parse(decodeURIComponent(document.getElementById(\"flowchart-0-options\").value)); var diagram = flowchart.parse(code); diagram.drawSVG(\"flowchart-0\", options);","tags":[{"name":"弹性伸缩","slug":"弹性伸缩","permalink":"http://www.lockey.xyz/tags/%E5%BC%B9%E6%80%A7%E4%BC%B8%E7%BC%A9/"}]},{"title":"Docker-部署-Jenkins","date":"2019-12-09T01:19:13.000Z","path":"2019/12/09/DevOps/Docker-部署-Jenkins/","text":"部署 Dockerfile FROM jenkins/jenkins:lts MAINTAINER Lockey USER root ARG dockerGid=999 RUN echo &quot;docker:x:${dockerGid}:jenkins&quot; &gt;&gt; /etc/group 构建 docker build . -t myjenkins 运行 docker run -d --privileged=true -p 8005:8080 -p 50000:50000 --name myjenkins_1 -v /root/jenkins:/var/jenkins_home -v /root/.ssh:/var/jenkins_home/.ssh -v /var/run/docker.sock:/var/run/docker.sock -v /var/lib/docker:/var/lib/docker -v $(which docker):/usr/bin/docker -v $(which docker-compose):/usr/bin/docker-compose myjenkins Slave 安装Java(8) apt install openjdk-8-jre-headless 配置免密登录 ssh-keygen -t rsa 注意 .ssh文件挂载 Git访问 Slave访问 Dockerfile 将用户加入docker用户组，不然没有Docker访问权限 更换源【国内】 打开： http[s]://[URL]/pluginManager/advanced 替换升级站点URL：https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json PS：如果出现更换后还是走了官方源，可以配置 Nginx： rewrite ^/download/plugins/(.*)$ https://mirrors.tuna.tsinghua.edu.cn/jenkins/plugins/$1? last;","tags":[{"name":"Jenkins","slug":"Jenkins","permalink":"http://www.lockey.xyz/tags/Jenkins/"}]},{"title":"Gitbook","date":"2019-12-05T03:58:04.000Z","path":"2019/12/05/Gitbook/","text":"Dockerfile FROM node WORKDIR /build EXPOSE 4000 RUN npm install gitbook -g; RUN npm install gitbook-cli -g; WORKDIR /build/work RUN gitbook init CMD [&quot;gitbook&quot;, &quot;serve&quot;] 构建 $ docker build . -t acgitbook 运行 $ docker run -d --name acgitbook_1 -p 8006:4000 -v /root/jenkins/workspace/acdocs/work:/build/work acgitbook /bin/bash -c &quot;gitbook install;gitbook serve&quot;","tags":[{"name":"文档工具","slug":"文档工具","permalink":"http://www.lockey.xyz/tags/%E6%96%87%E6%A1%A3%E5%B7%A5%E5%85%B7/"}]}]